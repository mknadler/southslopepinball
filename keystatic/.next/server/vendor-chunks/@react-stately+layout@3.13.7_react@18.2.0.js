"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-stately+layout@3.13.7_react@18.2.0";
exports.ids = ["vendor-chunks/@react-stately+layout@3.13.7_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@react-stately+layout@3.13.7_react@18.2.0/node_modules/@react-stately/layout/dist/import.mjs":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@react-stately+layout@3.13.7_react@18.2.0/node_modules/@react-stately/layout/dist/import.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListLayout: () => (/* binding */ $61ef60fc9b1041f4$export$cacbb3924155d68e),\n/* harmony export */   TableLayout: () => (/* binding */ $a152112e902709bf$export$62444c3c724b1b20)\n/* harmony export */ });\n/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/collections */ \"(ssr)/./node_modules/.pnpm/@react-stately+collections@3.10.5_react@18.2.0/node_modules/@react-stately/collections/dist/import.mjs\");\n/* harmony import */ var _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-stately/virtualizer */ \"(ssr)/./node_modules/.pnpm/@react-stately+virtualizer@3.6.8_react@18.2.0/node_modules/@react-stately/virtualizer/dist/import.mjs\");\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nconst $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;\nclass $61ef60fc9b1041f4$export$cacbb3924155d68e extends (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Layout) {\n    getLayoutInfo(key) {\n        let res = this.layoutInfos.get(key);\n        // If the layout info wasn't found, it might be outside the bounds of the area that we've\n        // computed layout for so far. This can happen when accessing a random key, e.g pressing Home/End.\n        // Compute the full layout and try again.\n        if (!res && this.validRect.area < this.contentSize.area && this.lastCollection) {\n            this.lastValidRect = this.validRect;\n            this.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, Infinity, Infinity);\n            this.rootNodes = this.buildCollection();\n            this.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, this.contentSize.width, this.contentSize.height);\n            res = this.layoutInfos.get(key);\n        }\n        return res;\n    }\n    getVisibleLayoutInfos(rect) {\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        if (!this.validRect.containsRect(rect) && this.lastCollection) {\n            this.lastValidRect = this.validRect;\n            this.validRect = this.validRect.union(rect);\n            this.rootNodes = this.buildCollection();\n        }\n        let res = [];\n        let addNodes = (nodes)=>{\n            for (let node of nodes)if (this.isVisible(node, rect)) {\n                res.push(node.layoutInfo);\n                if (node.header) res.push(node.header);\n                if (node.children) addNodes(node.children);\n            }\n        };\n        addNodes(this.rootNodes);\n        return res;\n    }\n    isVisible(node, rect) {\n        return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky || this.virtualizer.isPersistedKey(node.layoutInfo.key);\n    }\n    shouldInvalidateEverything(invalidationContext) {\n        // Invalidate cache if the size of the collection changed.\n        // In this case, we need to recalculate the entire layout.\n        return invalidationContext.sizeChanged;\n    }\n    validate(invalidationContext) {\n        this.collection = this.virtualizer.collection;\n        // Reset valid rect if we will have to invalidate everything.\n        // Otherwise we can reuse cached layout infos outside the current visible rect.\n        this.invalidateEverything = this.shouldInvalidateEverything(invalidationContext);\n        if (this.invalidateEverything) {\n            this.lastValidRect = this.validRect;\n            this.validRect = this.virtualizer.getVisibleRect();\n        }\n        this.rootNodes = this.buildCollection();\n        // Remove deleted layout nodes\n        if (this.lastCollection && this.collection !== this.lastCollection) {\n            for (let key of this.lastCollection.getKeys())if (!this.collection.getItem(key)) {\n                let layoutNode = this.layoutNodes.get(key);\n                if (layoutNode) {\n                    var _layoutNode_header;\n                    this.layoutInfos.delete(layoutNode.layoutInfo.key);\n                    this.layoutInfos.delete((_layoutNode_header = layoutNode.header) === null || _layoutNode_header === void 0 ? void 0 : _layoutNode_header.key);\n                    this.layoutNodes.delete(key);\n                }\n            }\n        }\n        this.lastWidth = this.virtualizer.visibleRect.width;\n        this.lastCollection = this.collection;\n        this.invalidateEverything = false;\n    }\n    buildCollection() {\n        let y = this.padding;\n        let skipped = 0;\n        let nodes = [];\n        for (let node of this.collection){\n            var _this_rowHeight;\n            let rowHeight = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (node.type === \"item\" && y + rowHeight < this.validRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, 0, y);\n            y = layoutNode.layoutInfo.rect.maxY;\n            nodes.push(layoutNode);\n            if (node.type === \"item\" && y > this.validRect.maxY) {\n                y += (this.collection.size - (nodes.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        if (this.isLoading) {\n            var _this_loaderHeight;\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, this.virtualizer.visibleRect.width, (_this_loaderHeight = this.loaderHeight) !== null && _this_loaderHeight !== void 0 ? _this_loaderHeight : this.virtualizer.visibleRect.height);\n            let loader = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"loader\", \"loader\", rect);\n            this.layoutInfos.set(\"loader\", loader);\n            nodes.push({\n                layoutInfo: loader\n            });\n            y = loader.rect.maxY;\n        }\n        if (nodes.length === 0) {\n            var _this_placeholderHeight;\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, this.virtualizer.visibleRect.width, (_this_placeholderHeight = this.placeholderHeight) !== null && _this_placeholderHeight !== void 0 ? _this_placeholderHeight : this.virtualizer.visibleRect.height);\n            let placeholder = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"placeholder\", \"placeholder\", rect);\n            this.layoutInfos.set(\"placeholder\", placeholder);\n            nodes.push({\n                layoutInfo: placeholder\n            });\n            y = placeholder.rect.maxY;\n        }\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(this.virtualizer.visibleRect.width, y + this.padding);\n        return nodes;\n    }\n    isValid(node, y) {\n        let cached = this.layoutNodes.get(node.key);\n        return !this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y && cached.layoutInfo.rect.intersects(this.lastValidRect) && cached.validRect.containsRect(cached.layoutInfo.rect.intersection(this.validRect));\n    }\n    buildChild(node, x, y) {\n        if (this.isValid(node, y)) return this.layoutNodes.get(node.key);\n        let layoutNode = this.buildNode(node, x, y);\n        layoutNode.node = node;\n        var _node_parentKey;\n        layoutNode.layoutInfo.parentKey = (_node_parentKey = node.parentKey) !== null && _node_parentKey !== void 0 ? _node_parentKey : null;\n        this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n        if (layoutNode.header) this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n        this.layoutNodes.set(node.key, layoutNode);\n        return layoutNode;\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case \"section\":\n                return this.buildSection(node, x, y);\n            case \"item\":\n                return this.buildItem(node, x, y);\n        }\n    }\n    buildSection(node, x, y) {\n        let width = this.virtualizer.visibleRect.width;\n        let rectHeight = this.headingHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode && previousLayoutNode.header) {\n                let curNode = this.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                rectHeight = previousLayoutNode.header.rect.height;\n                isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n            } else {\n                rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        let headerRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, width, rectHeight);\n        let header = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"header\", node.key + \":header\", headerRect);\n        header.estimatedSize = isEstimated;\n        header.parentKey = node.key;\n        y += header.rect.height;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, width, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        let startY = y;\n        let skipped = 0;\n        let children = [];\n        for (let child of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, this.collection)){\n            var _this_rowHeight;\n            let rowHeight = (_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.validRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(child, x, y);\n            y = layoutNode.layoutInfo.rect.maxY;\n            children.push(layoutNode);\n            if (y > this.validRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += ([\n                    ...(0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, this.collection)\n                ].length - (children.length + skipped)) * rowHeight;\n                break;\n            }\n        }\n        rect.height = y - startY;\n        return {\n            header: header,\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.validRect)\n        };\n    }\n    buildItem(node, x, y) {\n        let width = this.virtualizer.visibleRect.width;\n        let rectHeight = this.rowHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                rectHeight = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = width !== this.lastWidth || node !== previousLayoutNode.node || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                rectHeight = this.estimatedRowHeight;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n        if (typeof this.indentationForItem === \"function\") x += this.indentationForItem(this.collection, node.key) || 0;\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width - x, rectHeight);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        // allow overflow so the focus ring/selection ring can extend outside to overlap with the adjacent items borders\n        layoutInfo.allowOverflow = true;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            validRect: layoutInfo.rect\n        };\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        // If no layoutInfo, item has been deleted/removed.\n        if (!layoutInfo) return false;\n        layoutInfo.estimatedSize = false;\n        if (layoutInfo.rect.height !== size.height) {\n            // Copy layout info rather than mutating so that later caches are invalidated.\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            this.layoutInfos.set(key, newLayoutInfo);\n            // Invalidate layout for this layout node and all parents\n            this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n            let node = this.collection.getItem(layoutInfo.parentKey);\n            while(node){\n                this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n                node = this.collection.getItem(node.parentKey);\n            }\n            return true;\n        }\n        return false;\n    }\n    updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {\n        let n = this.layoutNodes.get(key);\n        if (n) {\n            // Invalidate by reseting validRect.\n            n.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n            // Replace layout info in LayoutNode\n            if (n.header === oldLayoutInfo) n.header = newLayoutInfo;\n            else if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;\n        }\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getKeyAbove(key) {\n        let collection = this.collection;\n        key = collection.getKeyBefore(key);\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === \"item\" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key))) return key;\n            key = collection.getKeyBefore(key);\n        }\n    }\n    getKeyBelow(key) {\n        let collection = this.collection;\n        key = collection.getKeyAfter(key);\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === \"item\" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key))) return key;\n            key = collection.getKeyAfter(key);\n        }\n    }\n    getKeyPageAbove(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (layoutInfo) {\n            let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n            while(layoutInfo && layoutInfo.rect.y > pageY){\n                let keyAbove = this.getKeyAbove(layoutInfo.key);\n                layoutInfo = this.getLayoutInfo(keyAbove);\n            }\n            if (layoutInfo) return layoutInfo.key;\n        }\n        return this.getFirstKey();\n    }\n    getKeyPageBelow(key) {\n        let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n        if (layoutInfo) {\n            let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n            while(layoutInfo && layoutInfo.rect.y < pageY){\n                let keyBelow = this.getKeyBelow(layoutInfo.key);\n                layoutInfo = this.getLayoutInfo(keyBelow);\n            }\n            if (layoutInfo) return layoutInfo.key;\n        }\n        return this.getLastKey();\n    }\n    getFirstKey() {\n        let collection = this.collection;\n        let key = collection.getFirstKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === \"item\" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key))) return key;\n            key = collection.getKeyAfter(key);\n        }\n    }\n    getLastKey() {\n        let collection = this.collection;\n        let key = collection.getLastKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === \"item\" && (this.allowDisabledKeyFocus || !this.disabledKeys.has(item.key))) return key;\n            key = collection.getKeyBefore(key);\n        }\n    }\n    getKeyForSearch(search, fromKey) {\n        if (!this.collator) return null;\n        let collection = this.collection;\n        let key = fromKey || this.getFirstKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            let substring = item.textValue.slice(0, search.length);\n            if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n            key = this.getKeyBelow(key);\n        }\n        return null;\n    }\n    getInitialLayoutInfo(layoutInfo) {\n        layoutInfo.opacity = 0;\n        layoutInfo.transform = \"scale3d(0.8, 0.8, 0.8)\";\n        return layoutInfo;\n    }\n    getFinalLayoutInfo(layoutInfo) {\n        layoutInfo.opacity = 0;\n        layoutInfo.transform = \"scale3d(0.8, 0.8, 0.8)\";\n        return layoutInfo;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        let key = this.virtualizer.keyAtPoint(new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Point)(x, y));\n        if (key == null || this.collection.size === 0) return {\n            type: \"root\"\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        let rect = layoutInfo.rect;\n        let target = {\n            type: \"item\",\n            key: layoutInfo.key,\n            dropPosition: \"on\"\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: \"before\"\n            })) target.dropPosition = \"before\";\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: \"after\"\n            })) target.dropPosition = \"after\";\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: \"before\"\n        })) target.dropPosition = \"before\";\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: \"after\"\n        })) target.dropPosition = \"after\";\n        return target;\n    }\n    /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */ constructor(options = {}){\n        super();\n        this.disabledKeys = new Set();\n        this.allowDisabledKeyFocus = false;\n        this.rowHeight = options.rowHeight;\n        this.estimatedRowHeight = options.estimatedRowHeight;\n        this.headingHeight = options.headingHeight;\n        this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n        this.padding = options.padding || 0;\n        this.indentationForItem = options.indentationForItem;\n        this.collator = options.collator;\n        this.loaderHeight = options.loaderHeight;\n        this.placeholderHeight = options.placeholderHeight;\n        this.layoutInfos = new Map();\n        this.layoutNodes = new Map();\n        this.rootNodes = [];\n        this.lastWidth = 0;\n        this.lastCollection = null;\n        this.allowDisabledKeyFocus = options.allowDisabledKeyFocus;\n        this.lastValidRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.validRect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)();\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)();\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\nclass $a152112e902709bf$export$62444c3c724b1b20 extends (0, $61ef60fc9b1041f4$export$cacbb3924155d68e) {\n    shouldInvalidateEverything(invalidationContext) {\n        // If columns changed, clear layout cache.\n        return super.shouldInvalidateEverything(invalidationContext) || !this.lastCollection || this.collection.columns.length !== this.lastCollection.columns.length || this.collection.columns.some((c, i)=>c.key !== this.lastCollection.columns[i].key || c.props.width !== this.lastCollection.columns[i].props.width || c.props.minWidth !== this.lastCollection.columns[i].props.minWidth || c.props.maxWidth !== this.lastCollection.columns[i].props.maxWidth);\n    }\n    getResizerPosition() {\n        var _this_getLayoutInfo;\n        return (_this_getLayoutInfo = this.getLayoutInfo(this.resizingColumn)) === null || _this_getLayoutInfo === void 0 ? void 0 : _this_getLayoutInfo.rect.maxX;\n    }\n    getColumnWidth(key) {\n        var _this_columnLayout_getColumnWidth;\n        return (_this_columnLayout_getColumnWidth = this.columnLayout.getColumnWidth(key)) !== null && _this_columnLayout_getColumnWidth !== void 0 ? _this_columnLayout_getColumnWidth : 0;\n    }\n    getColumnMinWidth(key) {\n        let column = this.collection.columns.find((col)=>col.key === key);\n        if (!column) return 0;\n        return this.columnLayout.getColumnMinWidth(key);\n    }\n    getColumnMaxWidth(key) {\n        let column = this.collection.columns.find((col)=>col.key === key);\n        if (!column) return 0;\n        return this.columnLayout.getColumnMaxWidth(key);\n    }\n    // outside, where this is called, should call props.onColumnResizeStart...\n    startResize(key) {\n        this.resizingColumn = key;\n    }\n    // only way to call props.onColumnResize with the new size outside of Layout is to send the result back\n    updateResizedColumns(key, width) {\n        let newControlled = new Map(Array.from(this.controlledColumns).map(([key, entry])=>[\n                key,\n                entry.props.width\n            ]));\n        let newSizes = this.columnLayout.resizeColumnWidth(this.virtualizer.visibleRect.width, this.collection, newControlled, this.uncontrolledWidths, key, width);\n        let map = new Map(Array.from(this.uncontrolledColumns).map(([key])=>[\n                key,\n                newSizes.get(key)\n            ]));\n        map.set(key, width);\n        this.uncontrolledWidths = map;\n        // relayoutNow still uses setState, should happen at the same time the parent\n        // component's state is processed as a result of props.onColumnResize\n        if (this.uncontrolledWidths.size > 0) this.virtualizer.relayoutNow({\n            sizeChanged: true\n        });\n        return newSizes;\n    }\n    endResize() {\n        this.resizingColumn = null;\n    }\n    buildCollection() {\n        // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n        let loadingState = this.collection.body.props.loadingState;\n        this.wasLoading = this.isLoading;\n        this.isLoading = loadingState === \"loading\" || loadingState === \"loadingMore\";\n        this.stickyColumnIndices = [];\n        for (let column of this.collection.columns)// The selection cell and any other sticky columns always need to be visible.\n        // In addition, row headers need to be in the DOM for accessibility labeling.\n        if (column.props.isDragButtonCell || column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);\n        let [controlledColumns, uncontrolledColumns] = this.columnLayout.splitColumnsIntoControlledAndUncontrolled(this.collection.columns);\n        this.controlledColumns = controlledColumns;\n        this.uncontrolledColumns = uncontrolledColumns;\n        let colWidths = this.columnLayout.recombineColumns(this.collection.columns, this.uncontrolledWidths, uncontrolledColumns, controlledColumns);\n        this.columnWidths = this.columnLayout.buildColumnWidths(this.virtualizer.visibleRect.width, this.collection, colWidths);\n        let header = this.buildHeader();\n        let body = this.buildBody(0);\n        this.lastPersistedKeys = null;\n        body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n        this.contentSize = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Size)(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n        return [\n            header,\n            body\n        ];\n    }\n    buildHeader() {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, 0, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"header\", \"header\", rect);\n        let y = 0;\n        let width = 0;\n        let children = [];\n        for (let headerRow of this.collection.headerRows){\n            let layoutNode = this.buildChild(headerRow, 0, y);\n            layoutNode.layoutInfo.parentKey = \"header\";\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            layoutNode.index = children.length;\n            children.push(layoutNode);\n        }\n        rect.width = width;\n        rect.height = y;\n        this.layoutInfos.set(\"header\", layoutInfo);\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect\n        };\n    }\n    buildHeaderRow(headerRow, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, 0, 0);\n        let row = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"headerrow\", headerRow.key, rect);\n        let height = 0;\n        let columns = [];\n        for (let cell of (0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(headerRow, this.collection)){\n            let layoutNode = this.buildChild(cell, x, y);\n            layoutNode.layoutInfo.parentKey = row.key;\n            x = layoutNode.layoutInfo.rect.maxX;\n            height = Math.max(height, layoutNode.layoutInfo.rect.height);\n            layoutNode.index = columns.length;\n            columns.push(layoutNode);\n        }\n        for (let [i, layout] of columns.entries())layout.layoutInfo.zIndex = columns.length - i + 1;\n        this.setChildHeights(columns, height);\n        rect.height = height;\n        rect.width = x;\n        return {\n            layoutInfo: row,\n            children: columns,\n            validRect: rect\n        };\n    }\n    setChildHeights(children, height) {\n        for (let child of children)if (child.layoutInfo.rect.height !== height) {\n            // Need to copy the layout info before we mutate it.\n            child.layoutInfo = child.layoutInfo.copy();\n            this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n            child.layoutInfo.rect.height = height;\n        }\n    }\n    // used to get the column widths when rendering to the DOM\n    getRenderedColumnWidth(node) {\n        var _node_colspan;\n        let colspan = (_node_colspan = node.colspan) !== null && _node_colspan !== void 0 ? _node_colspan : 1;\n        var _node_colIndex;\n        let colIndex = (_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index;\n        let width = 0;\n        for(let i = colIndex; i < colIndex + colspan; i++){\n            let column = this.collection.columns[i];\n            if ((column === null || column === void 0 ? void 0 : column.key) != null) width += this.columnWidths.get(column.key);\n        }\n        return width;\n    }\n    getEstimatedHeight(node, width, height, estimatedHeight) {\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (height == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                height = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = node !== previousLayoutNode.node || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                height = estimatedHeight;\n                isEstimated = true;\n            }\n        }\n        return {\n            height: height,\n            isEstimated: isEstimated\n        };\n    }\n    buildColumn(node, x, y) {\n        var _node_props, _node_props1;\n        let width = this.getRenderedColumnWidth(node);\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = !this.disableSticky && (((_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.isDragButtonCell) || ((_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.isSelectionCell));\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            validRect: layoutInfo.rect\n        };\n    }\n    buildBody(y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(0, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"rowgroup\", \"body\", rect);\n        let startY = y;\n        let skipped = 0;\n        let width = 0;\n        let children = [];\n        for (let [i, node] of [\n            ...this.collection\n        ].entries()){\n            var _this_rowHeight;\n            let rowHeight = ((_this_rowHeight = this.rowHeight) !== null && _this_rowHeight !== void 0 ? _this_rowHeight : this.estimatedRowHeight) + 1;\n            // Skip rows before the valid rectangle unless they are already cached.\n            if (y + rowHeight < this.validRect.y && !this.isValid(node, y)) {\n                y += rowHeight;\n                skipped++;\n                continue;\n            }\n            let layoutNode = this.buildChild(node, 0, y);\n            layoutNode.layoutInfo.parentKey = \"body\";\n            layoutNode.index = i;\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            children.push(layoutNode);\n            if (y > this.validRect.maxY) {\n                // Estimate the remaining height for rows that we don't need to layout right now.\n                y += (this.collection.size - (skipped + children.length)) * rowHeight;\n                break;\n            }\n        }\n        if (this.isLoading) {\n            // Add some margin around the loader to ensure that scrollbars don't flicker in and out.\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(40, Math.max(y, 40), (width || this.virtualizer.visibleRect.width) - 80, children.length === 0 ? this.virtualizer.visibleRect.height - 80 : 60);\n            let loader = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"loader\", \"loader\", rect);\n            loader.parentKey = \"body\";\n            loader.isSticky = !this.disableSticky && children.length === 0;\n            this.layoutInfos.set(\"loader\", loader);\n            children.push({\n                layoutInfo: loader,\n                validRect: loader.rect\n            });\n            y = loader.rect.maxY;\n            width = Math.max(width, rect.width);\n        } else if (children.length === 0) {\n            let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(40, Math.max(y, 40), this.virtualizer.visibleRect.width - 80, this.virtualizer.visibleRect.height - 80);\n            let empty = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"empty\", \"empty\", rect);\n            empty.parentKey = \"body\";\n            empty.isSticky = !this.disableSticky;\n            this.layoutInfos.set(\"empty\", empty);\n            children.push({\n                layoutInfo: empty,\n                validRect: empty.rect\n            });\n            y = empty.rect.maxY;\n            width = Math.max(width, rect.width);\n        }\n        rect.width = width;\n        rect.height = y - startY;\n        this.layoutInfos.set(\"body\", layoutInfo);\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: layoutInfo.rect.intersection(this.validRect)\n        };\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case \"headerrow\":\n                return this.buildHeaderRow(node, x, y);\n            case \"item\":\n                return this.buildRow(node, x, y);\n            case \"column\":\n            case \"placeholder\":\n                return this.buildColumn(node, x, y);\n            case \"cell\":\n                return this.buildCell(node, x, y);\n            default:\n                throw new Error(\"Unknown node type \" + node.type);\n        }\n    }\n    buildRow(node, x, y) {\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, 0, 0);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(\"row\", node.key, rect);\n        let children = [];\n        let height = 0;\n        for (let [i, child] of [\n            ...(0, _react_stately_collections__WEBPACK_IMPORTED_MODULE_1__.getChildNodes)(node, this.collection)\n        ].entries())if (child.type === \"cell\") {\n            if (x > this.validRect.maxX) {\n                // Adjust existing cached layoutInfo to ensure that it is out of view.\n                // This can happen due to column resizing.\n                let layoutNode = this.layoutNodes.get(child.key);\n                if (layoutNode) {\n                    layoutNode.layoutInfo.rect.x = x;\n                    x += layoutNode.layoutInfo.rect.width;\n                }\n            } else {\n                let layoutNode = this.buildChild(child, x, y);\n                x = layoutNode.layoutInfo.rect.maxX;\n                height = Math.max(height, layoutNode.layoutInfo.rect.height);\n                layoutNode.index = i;\n                children.push(layoutNode);\n            }\n        }\n        this.setChildHeights(children, height);\n        rect.width = this.layoutInfos.get(\"header\").rect.width;\n        rect.height = height + 1; // +1 for bottom border\n        return {\n            layoutInfo: layoutInfo,\n            children: children,\n            validRect: rect.intersection(this.validRect)\n        };\n    }\n    buildCell(node, x, y) {\n        var _node_props, _node_props1;\n        let width = this.getRenderedColumnWidth(node);\n        let { height: height, isEstimated: isEstimated } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n        let rect = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, width, height);\n        let layoutInfo = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.LayoutInfo)(node.type, node.key, rect);\n        layoutInfo.isSticky = !this.disableSticky && (((_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.isDragButtonCell) || ((_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.isSelectionCell));\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo,\n            validRect: rect\n        };\n    }\n    getVisibleLayoutInfos(rect) {\n        // If layout hasn't yet been done for the requested rect, union the\n        // new rect with the existing valid rect, and recompute.\n        if (!this.validRect.containsRect(rect) && this.lastCollection) {\n            this.lastValidRect = this.validRect;\n            this.validRect = this.validRect.union(rect);\n            this.rootNodes = this.buildCollection();\n        }\n        let res = [];\n        this.buildPersistedIndices();\n        for (let node of this.rootNodes){\n            res.push(node.layoutInfo);\n            this.addVisibleLayoutInfos(res, node, rect);\n        }\n        return res;\n    }\n    addVisibleLayoutInfos(res, node, rect) {\n        if (!node.children || node.children.length === 0) return;\n        switch(node.layoutInfo.type){\n            case \"header\":\n                for (let child of node.children){\n                    res.push(child.layoutInfo);\n                    this.addVisibleLayoutInfos(res, child, rect);\n                }\n                break;\n            case \"rowgroup\":\n                {\n                    let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, \"y\");\n                    let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, \"y\");\n                    // Add persisted rows before the visible rows.\n                    let persistedRowIndices = this.persistedIndices.get(node.layoutInfo.key);\n                    let persistIndex = 0;\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < firstVisibleRow){\n                        let idx = persistedRowIndices[persistIndex];\n                        if (idx < node.children.length) {\n                            res.push(node.children[idx].layoutInfo);\n                            this.addVisibleLayoutInfos(res, node.children[idx], rect);\n                        }\n                        persistIndex++;\n                    }\n                    for(let i = firstVisibleRow; i <= lastVisibleRow; i++){\n                        // Skip persisted rows that overlap with visible cells.\n                        while(persistedRowIndices && persistIndex < persistedRowIndices.length && persistedRowIndices[persistIndex] < i)persistIndex++;\n                        res.push(node.children[i].layoutInfo);\n                        this.addVisibleLayoutInfos(res, node.children[i], rect);\n                    }\n                    // Add persisted rows after the visible rows.\n                    while(persistedRowIndices && persistIndex < persistedRowIndices.length){\n                        let idx = persistedRowIndices[persistIndex++];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                    }\n                    break;\n                }\n            case \"headerrow\":\n            case \"row\":\n                {\n                    let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, \"x\");\n                    let lastVisibleCell = this.binarySearch(node.children, rect.topRight, \"x\");\n                    let stickyIndex = 0;\n                    // Add persisted/sticky cells before the visible cells.\n                    let persistedCellIndices = this.persistedIndices.get(node.layoutInfo.key) || this.stickyColumnIndices;\n                    while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < firstVisibleCell){\n                        let idx = persistedCellIndices[stickyIndex];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                        stickyIndex++;\n                    }\n                    for(let i = firstVisibleCell; i <= lastVisibleCell; i++){\n                        // Skip sticky cells that overlap with visible cells.\n                        while(stickyIndex < persistedCellIndices.length && persistedCellIndices[stickyIndex] < i)stickyIndex++;\n                        res.push(node.children[i].layoutInfo);\n                    }\n                    // Add any remaining sticky cells after the visible cells.\n                    while(stickyIndex < persistedCellIndices.length){\n                        let idx = persistedCellIndices[stickyIndex++];\n                        if (idx < node.children.length) res.push(node.children[idx].layoutInfo);\n                    }\n                    break;\n                }\n            default:\n                throw new Error(\"Unknown node type \" + node.layoutInfo.type);\n        }\n    }\n    binarySearch(items, point, axis) {\n        let low = 0;\n        let high = items.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            let item = items[mid];\n            if (axis === \"x\" && item.layoutInfo.rect.maxX < point.x || axis === \"y\" && item.layoutInfo.rect.maxY < point.y) low = mid + 1;\n            else if (axis === \"x\" && item.layoutInfo.rect.x > point.x || axis === \"y\" && item.layoutInfo.rect.y > point.y) high = mid - 1;\n            else return mid;\n        }\n        return Math.max(0, Math.min(items.length - 1, low));\n    }\n    buildPersistedIndices() {\n        if (this.virtualizer.persistedKeys === this.lastPersistedKeys) return;\n        this.lastPersistedKeys = this.virtualizer.persistedKeys;\n        this.persistedIndices.clear();\n        // Build a map of parentKey => indices of children to persist.\n        for (let key of this.virtualizer.persistedKeys){\n            let layoutInfo = this.layoutInfos.get(key);\n            // Walk up ancestors so parents are also persisted if children are.\n            while(layoutInfo && layoutInfo.parentKey){\n                let collectionNode = this.collection.getItem(layoutInfo.key);\n                let indices = this.persistedIndices.get(layoutInfo.parentKey);\n                if (!indices) {\n                    // stickyColumnIndices are always persisted along with any cells from persistedKeys.\n                    indices = collectionNode.type === \"cell\" || collectionNode.type === \"column\" ? [\n                        ...this.stickyColumnIndices\n                    ] : [];\n                    this.persistedIndices.set(layoutInfo.parentKey, indices);\n                }\n                let index = this.layoutNodes.get(layoutInfo.key).index;\n                if (!indices.includes(index)) indices.push(index);\n                layoutInfo = this.layoutInfos.get(layoutInfo.parentKey);\n            }\n        }\n        for (let indices of this.persistedIndices.values())indices.sort((a, b)=>a - b);\n    }\n    getInitialLayoutInfo(layoutInfo) {\n        let res = super.getInitialLayoutInfo(layoutInfo);\n        res.transform = null;\n        return res;\n    }\n    getFinalLayoutInfo(layoutInfo) {\n        let res = super.getFinalLayoutInfo(layoutInfo);\n        res.transform = null;\n        return res;\n    }\n    // Checks if Chrome version is 105 or greater\n    checkChrome105() {\n        var _window_navigator_userAgentData;\n        if (typeof window === \"undefined\" || window.navigator == null) return false;\n        let isChrome105;\n        if (window.navigator[\"userAgentData\"]) isChrome105 = (_window_navigator_userAgentData = window.navigator[\"userAgentData\"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((b)=>b.brand === \"Chromium\" && Number(b.version) === 105);\n        else {\n            let regex = /Chrome\\/(\\d+)/;\n            let matches = regex.exec(window.navigator.userAgent);\n            isChrome105 = matches && matches.length >= 2 && Number(matches[1]) === 105;\n        }\n        return isChrome105;\n    }\n    getDropTargetFromPoint(x, y, isValidDropTarget) {\n        var _this_virtualizer_layout_getVisibleLayoutInfos_find;\n        x += this.virtualizer.visibleRect.x;\n        y += this.virtualizer.visibleRect.y;\n        // Offset for height of header row\n        y -= (_this_virtualizer_layout_getVisibleLayoutInfos_find = this.virtualizer.layout.getVisibleLayoutInfos(new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(x, y, 1, 1)).find((info)=>info.type === \"headerrow\")) === null || _this_virtualizer_layout_getVisibleLayoutInfos_find === void 0 ? void 0 : _this_virtualizer_layout_getVisibleLayoutInfos_find.rect.height;\n        // Custom variation of this.virtualizer.keyAtPoint that ignores body\n        let key;\n        let point = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Point)(x, y);\n        let rectAtPoint = new (0, _react_stately_virtualizer__WEBPACK_IMPORTED_MODULE_0__.Rect)(point.x, point.y, 1, 1);\n        let layoutInfos = this.virtualizer.layout.getVisibleLayoutInfos(rectAtPoint).filter((info)=>info.type === \"row\");\n        // Layout may return multiple layout infos in the case of\n        // persisted keys, so find the first one that actually intersects.\n        for (let layoutInfo of layoutInfos)if (layoutInfo.rect.intersects(rectAtPoint)) key = layoutInfo.key;\n        if (key == null || this.collection.size === 0) return {\n            type: \"root\"\n        };\n        let layoutInfo = this.getLayoutInfo(key);\n        let rect = layoutInfo.rect;\n        let target = {\n            type: \"item\",\n            key: layoutInfo.key,\n            dropPosition: \"on\"\n        };\n        // If dropping on the item isn't accepted, try the target before or after depending on the y position.\n        // Otherwise, if dropping on the item is accepted, still try the before/after positions if within 10px\n        // of the top or bottom of the item.\n        if (!isValidDropTarget(target)) {\n            if (y <= rect.y + rect.height / 2 && isValidDropTarget({\n                ...target,\n                dropPosition: \"before\"\n            })) target.dropPosition = \"before\";\n            else if (isValidDropTarget({\n                ...target,\n                dropPosition: \"after\"\n            })) target.dropPosition = \"after\";\n        } else if (y <= rect.y + 10 && isValidDropTarget({\n            ...target,\n            dropPosition: \"before\"\n        })) target.dropPosition = \"before\";\n        else if (y >= rect.maxY - 10 && isValidDropTarget({\n            ...target,\n            dropPosition: \"after\"\n        })) target.dropPosition = \"after\";\n        return target;\n    }\n    constructor(options){\n        super(options);\n        this.columnWidths = new Map();\n        this.wasLoading = false;\n        this.isLoading = false;\n        this.lastPersistedKeys = null;\n        this.persistedIndices = new Map();\n        this.collection = options.initialCollection;\n        this.stickyColumnIndices = [];\n        this.disableSticky = this.checkChrome105();\n        this.columnLayout = options.columnLayout;\n        let [controlledColumns, uncontrolledColumns] = this.columnLayout.splitColumnsIntoControlledAndUncontrolled(this.collection.columns);\n        this.controlledColumns = controlledColumns;\n        this.uncontrolledColumns = uncontrolledColumns;\n        this.uncontrolledWidths = this.columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n    }\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@react-stately+layout@3.13.7_react@18.2.0/node_modules/@react-stately/layout/dist/import.mjs\n");

/***/ })

};
;