"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@urql+exchange-graphcache@6.5.1_graphql@16.8.1";
exports.ids = ["vendor-chunks/@urql+exchange-graphcache@6.5.1_graphql@16.8.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@urql+exchange-graphcache@6.5.1_graphql@16.8.1/node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@urql+exchange-graphcache@6.5.1_graphql@16.8.1/node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   cacheExchange: () => (/* binding */ cacheExchange),\n/* harmony export */   offlineExchange: () => (/* binding */ offlineExchange)\n/* harmony export */ });\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/.pnpm/@urql+core@4.3.0_graphql@16.8.1/node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @urql/core */ \"(ssr)/./node_modules/.pnpm/@urql+core@4.3.0_graphql@16.8.1/node_modules/@urql/core/dist/urql-core.mjs\");\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/.pnpm/@0no-co+graphql.web@1.0.7_graphql@16.8.1/node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/.pnpm/wonka@6.3.4/node_modules/wonka/dist/wonka.mjs\");\n\n\n\n\n\n\nvar h = \"\\nhttps://bit.ly/2XbVrpR#\";\n\nvar m = new Set;\n\nvar g = [];\n\nvar popDebugNode = () => g.pop();\n\nvar pushDebugNode = (e, r) => {\n  var t = \"\";\n  if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT) {\n    t = e ? `Inline Fragment on \"${e}\"` : \"Inline Fragment\";\n  } else if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n    t = `${r.name ? `\"${r.name.value}\"` : \"Unnamed\"} ${r.operation}`;\n  } else if (r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n    t = `\"${r.name.value}\" Fragment`;\n  }\n  if (t) {\n    g.push(t);\n  }\n};\n\nvar getDebugOutput = () => g.length ? \"\\n(Caused At: \" + g.join(\", \") + \")\" : \"\";\n\nfunction invariant(e, r, t) {\n  if (!e) {\n    var a = r || \"Minfied Error #\" + t + \"\\n\";\n    if (true) {\n      a += getDebugOutput();\n    }\n    var i = new Error(a + h + t);\n    i.name = \"Graphcache Error\";\n    throw i;\n  }\n}\n\nfunction warn(e, r, t) {\n  if (!m.has(e)) {\n    if (t) {\n      t(\"warn\", e + getDebugOutput() + h + r);\n    } else {\n      console.warn(e + getDebugOutput() + h + r);\n    }\n    m.add(e);\n  }\n}\n\nvar _ = {};\n\nvar getDirectives = e => e._directives || _;\n\nvar getName = e => e.name.value;\n\nvar getFragmentTypeName = e => e.typeCondition.name.value;\n\nvar getFieldAlias = e => e.alias ? e.alias.value : e.name.value;\n\nvar N = [];\n\nvar getSelectionSet = e => e.selectionSet ? e.selectionSet.selections : N;\n\nvar getTypeCondition = e => e.typeCondition ? e.typeCondition.name.value : null;\n\nvar getFieldArguments = (e, r) => {\n  var t = null;\n  if (e.arguments) {\n    for (var a = 0, i = e.arguments.length; a < i; a++) {\n      var n = e.arguments[a];\n      var s = (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.value, r);\n      if (null != s) {\n        if (!t) {\n          t = {};\n        }\n        t[getName(n)] = s;\n      }\n    }\n  }\n  return t;\n};\n\nvar filterVariables = (e, r) => {\n  if (!r || !e.variableDefinitions) {\n    return;\n  }\n  var t = {};\n  for (var a = 0, i = e.variableDefinitions.length; a < i; a++) {\n    var n = getName(e.variableDefinitions[a].variable);\n    t[n] = r[n];\n  }\n  return t;\n};\n\nvar normalizeVariables = (e, r) => {\n  var t = {};\n  if (!r) {\n    return t;\n  }\n  if (e.variableDefinitions) {\n    for (var a = 0, i = e.variableDefinitions.length; a < i; a++) {\n      var n = e.variableDefinitions[a];\n      var s = getName(n.variable);\n      t[s] = void 0 === r[s] && n.defaultValue ? (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.defaultValue, r) : r[s];\n    }\n  }\n  for (var l in r) {\n    if (!(l in t)) {\n      t[l] = r[l];\n    }\n  }\n  return t;\n};\n\nfunction getMainOperation(e) {\n  for (var r = 0; r < e.definitions.length; r++) {\n    if (e.definitions[r].kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n      return e.definitions[r];\n    }\n  }\n  invariant(!1,  true ? \"Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation.\" : 0, 1);\n}\n\nvar getFragments = e => {\n  var r = {};\n  for (var t = 0; t < e.definitions.length; t++) {\n    var a = e.definitions[t];\n    if (a.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n      r[getName(a)] = a;\n    }\n  }\n  return r;\n};\n\nvar shouldInclude = (e, r) => {\n  var t = getDirectives(e);\n  if (t.include || t.skip) {\n    for (var a in t) {\n      var i = t[a];\n      if (i && (\"include\" === a || \"skip\" === a) && i.arguments && i.arguments[0] && \"if\" === getName(i.arguments[0])) {\n        var n = (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(i.arguments[0].value, r);\n        return \"include\" === a ? !!n : !n;\n      }\n    }\n  }\n  return !0;\n};\n\nvar isDeferred = (e, r) => {\n  var {defer: t} = getDirectives(e);\n  if (t) {\n    for (var a of t.arguments || []) {\n      if (\"if\" === getName(a)) {\n        return !!(0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(a.value, r);\n      }\n    }\n    return !0;\n  }\n  return !1;\n};\n\nvar isOptional = e => {\n  var {optional: r, required: t} = getDirectives(e);\n  if (t) {\n    return !1;\n  }\n  if (r) {\n    return !0;\n  }\n  return;\n};\n\nvar k = \"__\";\n\nvar isFieldNullable = (e, r, t, a) => {\n  var i = getField(e, r, t, a);\n  return !!i && \"NON_NULL\" !== i.type.kind;\n};\n\nvar isListNullable = (e, r, t, a) => {\n  var i = getField(e, r, t, a);\n  if (!i) {\n    return !1;\n  }\n  var n = \"NON_NULL\" === i.type.kind ? i.type.ofType : i.type;\n  return \"LIST\" === n.kind && \"NON_NULL\" !== n.ofType.kind;\n};\n\nvar isFieldAvailableOnType = (e, r, t, a) => 0 === t.indexOf(k) || 0 === r.indexOf(k) || !!getField(e, r, t, a);\n\nvar isInterfaceOfType = (e, r, t) => {\n  if (!t) {\n    return !1;\n  }\n  var a = getTypeCondition(r);\n  if (!a || t === a) {\n    return !0;\n  } else if (e.types.has(a) && \"OBJECT\" === e.types.get(a).kind) {\n    return a === t;\n  }\n  !function expectAbstractType(e, r) {\n    invariant(e.types.has(r) && (\"INTERFACE\" === e.types.get(r).kind || \"UNION\" === e.types.get(r).kind),  true ? \"Invalid Abstract type: The type `\" + r + \"` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition.\" : 0, 5);\n  }(e, a);\n  expectObjectType(e, t);\n  return e.isSubType(a, t);\n};\n\nvar getField = (e, r, t, a) => {\n  if (0 === t.indexOf(k) || 0 === r.indexOf(k)) {\n    return;\n  }\n  expectObjectType(e, r);\n  var i = e.types.get(r).fields()[t];\n  if (true) {\n    if (!i) {\n      warn(\"Invalid field: The field `\" + t + \"` does not exist on `\" + r + \"`, but the GraphQL document expects it to exist.\\nTraversal will continue, however this may lead to undefined behavior!\", 4, a);\n    }\n  }\n  return i;\n};\n\nfunction expectObjectType(e, r) {\n  invariant(e.types.has(r) && \"OBJECT\" === e.types.get(r).kind,  true ? \"Invalid Object type: The type `\" + r + \"` is not an object in the defined schema, but the GraphQL document is traversing it.\" : 0, 3);\n}\n\nfunction warnAboutResolver(e, r) {\n   true && warn(`Invalid resolver: \\`${e}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`, 23, r);\n}\n\nfunction warnAboutAbstractResolver(e, r, t) {\n   true && warn(`Invalid resolver: \\`${e}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\"UNION\" === r ? \"make up the union\" : \"implement the interface\"} instead.`, 26, t);\n}\n\nvar keyOfField = (r, t) => t ? `${r}(${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(t)})` : r;\n\nvar joinKeys = (e, r) => `${e}.${r}`;\n\nvar fieldInfoOfKey = e => {\n  var r = e.indexOf(\"(\");\n  if (r > -1) {\n    return {\n      fieldKey: e,\n      fieldName: e.slice(0, r),\n      arguments: JSON.parse(e.slice(r + 1, -1))\n    };\n  } else {\n    return {\n      fieldKey: e,\n      fieldName: e,\n      arguments: null\n    };\n  }\n};\n\nvar deserializeKeyInfo = e => {\n  var r = e.indexOf(\".\");\n  return {\n    entityKey: e.slice(0, r).replace(/%2e/g, \".\"),\n    fieldKey: e.slice(r + 1)\n  };\n};\n\nvar E = null;\n\nvar O = null;\n\nvar w = null;\n\nvar b = null;\n\nvar D = null;\n\nvar x = null;\n\nvar V = !1;\n\nvar I = !1;\n\nfunction makeData(e, r) {\n  var t;\n  if (e) {\n    if (E.has(e)) {\n      return e;\n    }\n    t = O.get(e);\n  }\n  if (null == t) {\n    t = r ? [] : {};\n  }\n  if (e) {\n    O.set(e, t);\n  }\n  E.add(t);\n  return t;\n}\n\nvar ownsData = e => !!e && E.has(e);\n\nvar initDataState = (e, r, t, a, i) => {\n  E = new WeakSet;\n  O = new WeakMap;\n  D = e;\n  w = r;\n  x = new Set;\n  I = !!a;\n  V = !!i;\n  if (true) {\n    g.length = 0;\n  }\n  if (!t) {\n    b = null;\n  } else if (\"read\" === D) {\n    b = t;\n  } else if (a || r.hydrating || r.optimisticOrder.length > 1) {\n    if (!a && !r.commutativeKeys.has(t)) {\n      reserveLayer(r, t);\n    } else if (a) {\n      if (-1 !== r.optimisticOrder.indexOf(t) && !r.commutativeKeys.has(t)) {\n        r.optimisticOrder.splice(r.optimisticOrder.indexOf(t), 1);\n      }\n      r.commutativeKeys.delete(t);\n    }\n    b = t;\n    createLayer(r, t);\n  } else {\n    b = null;\n    deleteLayer(r, t);\n  }\n};\n\nvar clearDataState = () => {\n  if (true) {\n    getCurrentDependencies();\n  }\n  var e = w;\n  var r = b;\n  I = !1;\n  b = null;\n  if (!e.hydrating && r && e.optimisticOrder.indexOf(r) > -1) {\n    var t = e.optimisticOrder.length;\n    while (--t >= 0 && e.dirtyKeys.has(e.optimisticOrder[t]) && e.commutativeKeys.has(e.optimisticOrder[t])) {\n      squashLayer(e.optimisticOrder[t]);\n    }\n  }\n  E = null;\n  O = null;\n  D = null;\n  w = null;\n  x = null;\n  if (true) {\n    g.length = 0;\n  }\n  if (true) {\n    if (!e.defer && (e.storage || !e.optimisticOrder.length)) {\n      e.defer = !0;\n      setTimeout((() => {\n        initDataState(\"read\", e, null);\n        gc();\n        persistData();\n        clearDataState();\n        e.defer = !1;\n      }));\n    }\n  }\n};\n\nvar noopDataState = (e, r, t) => {\n  if (r && !t) {\n    e.deferredKeys.delete(r);\n  }\n  initDataState(\"write\", e, r, t);\n  clearDataState();\n};\n\nvar getCurrentDependencies = () => {\n  invariant(null !== x,  true ? \"Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs.\" : 0, 2);\n  return x;\n};\n\nvar q = new Set;\n\nvar setNode = (e, r, t, a) => {\n  if (true) {\n    invariant(\"read\" !== D,  true ? \"Invalid Cache write: You may not write to the cache during cache reads.  Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may  not be made inside `resolvers` for instance.\" : 0, 27);\n  }\n  var i = b ? e.optimistic.get(b) : e.base;\n  var n = i.get(r);\n  if (void 0 === n) {\n    i.set(r, n = Object.create(null));\n  }\n  if (void 0 === a && !b) {\n    delete n[t];\n  } else {\n    n[t] = a;\n  }\n};\n\nvar getNode = (e, r, t) => {\n  var a;\n  var i = !I && \"read\" === D && b && w.commutativeKeys.has(b);\n  for (var n = 0, o = w.optimisticOrder.length; n < o; n++) {\n    var s = w.optimisticOrder[n];\n    var l = e.optimistic.get(s);\n    i = i && s !== b;\n    if (l && (!i || !w.commutativeKeys.has(s)) && (!I || \"write\" === D || w.commutativeKeys.has(s)) && void 0 !== (a = l.get(r)) && t in a) {\n      return a[t];\n    }\n  }\n  return void 0 !== (a = e.base.get(r)) ? a[t] : void 0;\n};\n\nvar updateRCForLink = (e, r) => {\n  if (Array.isArray(e)) {\n    for (var t = 0, a = e.length; t < a; t++) {\n      updateRCForLink(e[t], r);\n    }\n  } else if (\"string\" == typeof e) {\n    ((e, r) => {\n      var t = w.refCount.get(e) || 0;\n      var a = t + r > 0 ? t + r : 0;\n      w.refCount.set(e, a);\n      if (!a) {\n        w.gc.add(e);\n      } else if (!t && a) {\n        w.gc.delete(e);\n      }\n    })(e, r);\n  }\n};\n\nvar extractNodeFields = (e, r, t) => {\n  if (void 0 !== t) {\n    for (var a in t) {\n      if (!r.has(a)) {\n        e.push(fieldInfoOfKey(a));\n        r.add(a);\n      }\n    }\n  }\n};\n\nvar extractNodeMapFields = (e, r, t, a) => {\n  extractNodeFields(e, r, a.base.get(t));\n  for (var i = 0, n = w.optimisticOrder.length; i < n; i++) {\n    var o = a.optimistic.get(w.optimisticOrder[i]);\n    if (void 0 !== o) {\n      extractNodeFields(e, r, o.get(t));\n    }\n  }\n};\n\nvar gc = () => {\n  if (w.optimisticOrder.length) {\n    return;\n  }\n  for (var e of w.gc.keys()) {\n    w.gc.delete(e);\n    if ((w.refCount.get(e) || 0) > 0) {\n      continue;\n    }\n    var r = w.records.base.get(e);\n    w.refCount.delete(e);\n    w.records.base.delete(e);\n    var t = r && r.__typename;\n    if (t) {\n      var a = w.types.get(t);\n      if (a) {\n        a.delete(e);\n      }\n    }\n    var i = w.links.base.get(e);\n    if (i) {\n      w.links.base.delete(e);\n      for (var n in i) {\n        updateRCForLink(i[n], -1);\n      }\n    }\n  }\n};\n\nvar updateDependencies = (e, r) => {\n  if (e !== w.queryRootKey) {\n    x.add(e);\n  } else if (void 0 !== r && \"__typename\" !== r) {\n    x.add(joinKeys(e, r));\n  }\n};\n\nvar updatePersist = (e, r) => {\n  if (!I && w.storage) {\n    w.persist.add(((e, r) => `${e.replace(/\\./g, \"%2e\")}.${r}`)(e, r));\n  }\n};\n\nvar readRecord = (e, r) => {\n  updateDependencies(e, r);\n  return getNode(w.records, e, r);\n};\n\nvar readLink = (e, r) => {\n  updateDependencies(e, r);\n  return getNode(w.links, e, r);\n};\n\nvar writeRecord = (e, r, t) => {\n  updateDependencies(e, r);\n  updatePersist(e, r);\n  setNode(w.records, e, r, t);\n};\n\nvar hasField = (e, r) => void 0 !== readRecord(e, r) || void 0 !== readLink(e, r);\n\nvar writeLink = (e, r, t) => {\n  var a = b ? w.links.optimistic.get(b) : w.links.base;\n  if (!b) {\n    var i = a && a.get(e);\n    updateRCForLink(i && i[r], -1);\n    updateRCForLink(t, 1);\n  }\n  updateDependencies(e, r);\n  updatePersist(e, r);\n  setNode(w.links, e, r, t);\n};\n\nvar reserveLayer = (e, r, t) => {\n  var a = e.optimisticOrder.indexOf(r);\n  if (a > -1) {\n    e.optimisticOrder.splice(a, 1);\n  }\n  if (t) {\n    e.deferredKeys.add(r);\n    for (a = a > -1 ? a : 0; a < e.optimisticOrder.length && !e.deferredKeys.has(e.optimisticOrder[a]) && (!e.dirtyKeys.has(e.optimisticOrder[a]) || !e.commutativeKeys.has(e.optimisticOrder[a])); a++) {}\n  } else {\n    e.deferredKeys.delete(r);\n    if (a > -1 && !e.commutativeKeys.has(r)) {\n      clearLayer(e, r);\n    }\n    a = 0;\n  }\n  e.optimisticOrder.splice(a, 0, r);\n  e.commutativeKeys.add(r);\n};\n\nvar createLayer = (e, r) => {\n  if (-1 === e.optimisticOrder.indexOf(r)) {\n    e.optimisticOrder.unshift(r);\n  }\n  if (!e.dirtyKeys.has(r)) {\n    e.dirtyKeys.add(r);\n    e.links.optimistic.set(r, new Map);\n    e.records.optimistic.set(r, new Map);\n  }\n};\n\nvar clearLayer = (e, r) => {\n  if (e.dirtyKeys.has(r)) {\n    e.dirtyKeys.delete(r);\n    e.records.optimistic.delete(r);\n    e.links.optimistic.delete(r);\n    e.deferredKeys.delete(r);\n  }\n};\n\nvar deleteLayer = (e, r) => {\n  var t = e.optimisticOrder.indexOf(r);\n  if (t > -1) {\n    e.optimisticOrder.splice(t, 1);\n    e.commutativeKeys.delete(r);\n  }\n  clearLayer(e, r);\n};\n\nvar squashLayer = e => {\n  var r = x;\n  x = new Set;\n  D = \"write\";\n  var t = w.links.optimistic.get(e);\n  if (t) {\n    for (var a of t.entries()) {\n      var i = a[0];\n      var n = a[1];\n      for (var o in n) {\n        writeLink(i, o, n[o]);\n      }\n    }\n  }\n  var s = w.records.optimistic.get(e);\n  if (s) {\n    for (var l of s.entries()) {\n      var v = l[0];\n      var d = l[1];\n      for (var u in d) {\n        writeRecord(v, u, d[u]);\n      }\n    }\n  }\n  x = r;\n  deleteLayer(w, e);\n};\n\nvar inspectFields = e => {\n  var {links: r, records: t} = w;\n  var a = [];\n  var i = new Set;\n  updateDependencies(e);\n  extractNodeMapFields(a, i, e, r);\n  extractNodeMapFields(a, i, e, t);\n  return a;\n};\n\nvar persistData = () => {\n  if (w.storage) {\n    I = !0;\n    D = \"read\";\n    var r = {};\n    for (var t of w.persist.keys()) {\n      var {entityKey: a, fieldKey: i} = deserializeKeyInfo(t);\n      var n = void 0;\n      if (void 0 !== (n = readLink(a, i))) {\n        r[t] = `:${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(n)}`;\n      } else if (void 0 !== (n = readRecord(a, i))) {\n        r[t] = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.i)(n);\n      } else {\n        r[t] = void 0;\n      }\n    }\n    I = !1;\n    w.storage.writeData(r);\n    w.persist.clear();\n  }\n};\n\nvar S = null;\n\nvar T = !1;\n\nvar A = void 0;\n\nvar getFieldError = e => e.__internal.path.length > 0 && e.__internal.errorMap ? e.__internal.errorMap[e.__internal.path.join(\".\")] : void 0;\n\nvar makeContext = (e, r, t, a, i, n) => {\n  var o = {\n    store: e,\n    variables: r,\n    fragments: t,\n    parent: {\n      __typename: a\n    },\n    parentTypeName: a,\n    parentKey: i,\n    parentFieldKey: \"\",\n    fieldName: \"\",\n    error: void 0,\n    partial: !1,\n    hasNext: !1,\n    optimistic: I,\n    __internal: {\n      path: [],\n      errorMap: void 0\n    }\n  };\n  if (n && n.graphQLErrors) {\n    for (var s = 0; s < n.graphQLErrors.length; s++) {\n      var l = n.graphQLErrors[s];\n      if (l.path && l.path.length) {\n        if (!o.__internal.errorMap) {\n          o.__internal.errorMap = Object.create(null);\n        }\n        o.__internal.errorMap[l.path.join(\".\")] = l;\n      }\n    }\n  }\n  return o;\n};\n\nvar updateContext = (e, r, t, a, i, n) => {\n  S = e;\n  e.parent = r;\n  e.parentTypeName = t;\n  e.parentKey = a;\n  e.parentFieldKey = i;\n  e.fieldName = n;\n  e.error = getFieldError(e);\n};\n\nvar isFragmentHeuristicallyMatching = (e, r, t, a, i) => {\n  if (!r) {\n    return !1;\n  }\n  var o = getTypeCondition(e);\n  if (!o || r === o) {\n    return !0;\n  }\n   true && warn(\"Heuristic Fragment Matching: A fragment is trying to match against the `\" + r + \"` type, but the type condition is `\" + o + \"`. Since GraphQL allows for interfaces `\" + o + \"` may be an interface.\\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!\", 16, i);\n  return \"write\" === D || !getSelectionSet(e).some((e => {\n    if (e.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD) {\n      return !1;\n    }\n    var r = keyOfField(getName(e), getFieldArguments(e, a));\n    return !hasField(t, r);\n  }));\n};\n\nfunction makeSelectionIterator(e, r, t, a, i, o) {\n  var s;\n  var l = 0;\n  return function next() {\n    var v;\n    while (s || l < i.length) {\n      v = void 0;\n      T = t;\n      A = a;\n      if (s) {\n        if (v = s()) {\n          return v;\n        } else {\n          s = void 0;\n          if (true) {\n            popDebugNode();\n          }\n        }\n      } else {\n        var d = i[l++];\n        if (!shouldInclude(d, o.variables)) {} else if (d.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD) {\n          var u = d.kind !== _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT ? o.fragments[getName(d)] : d;\n          if (u) {\n            if (!u.typeCondition || (o.store.schema ? isInterfaceOfType(o.store.schema, u, e) : isFragmentHeuristicallyMatching(u, e, r, o.variables, o.store.logger))) {\n              if (true) {\n                pushDebugNode(e, u);\n              }\n              var c = isOptional(d);\n              s = makeSelectionIterator(e, r, t || isDeferred(d, o.variables), void 0 !== c ? c : a, getSelectionSet(u), o);\n            }\n          }\n        } else if (\"write\" === D || !d._generated) {\n          return d;\n        }\n      }\n    }\n  };\n}\n\nvar ensureData = e => null == e ? null : e;\n\nvar ensureLink = (e, r) => {\n  if (!r) {\n    return r || null;\n  } else if (Array.isArray(r)) {\n    var t = new Array(r.length);\n    for (var a = 0, i = t.length; a < i; a++) {\n      t[a] = ensureLink(e, r[a]);\n    }\n    return t;\n  }\n  var n = e.keyOfEntity(r);\n  if (true) {\n    if (!n && r && \"object\" == typeof r) {\n      warn(\"Can't generate a key for link(...) item.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + r.__typename + \"`.\", 12, e.logger);\n    }\n  }\n  return n;\n};\n\nvar _query = (e, t, a, i) => {\n  var n = (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(t.query);\n  var o = getMainOperation(n);\n  var s = e.rootFields[o.operation];\n  var l = getSelectionSet(o);\n  var v = makeContext(e, normalizeVariables(o, t.variables), getFragments(n), s, s, i);\n  if (true) {\n    pushDebugNode(s, o);\n  }\n  var d = s !== v.store.rootFields.query ? readRoot(v, s, l, a || makeData()) : readSelection(v, s, l, a || makeData());\n  if (true) {\n    popDebugNode();\n    getCurrentDependencies();\n  }\n  return {\n    dependencies: x,\n    partial: v.partial || !d,\n    hasNext: v.hasNext,\n    data: d || null\n  };\n};\n\nvar readRoot = (e, r, t, a) => {\n  if (\"string\" != typeof (e.store.rootNames[r] ? r : a.__typename)) {\n    return a;\n  }\n  var i = makeSelectionIterator(r, r, !1, void 0, t, e);\n  var n;\n  var o = V;\n  var s = makeData(a);\n  while (n = i()) {\n    var l = getFieldAlias(n);\n    var v = a[l];\n    e.__internal.path.push(l);\n    var d = void 0;\n    if (n.selectionSet && null !== v) {\n      d = readRootField(e, getSelectionSet(n), ensureData(v));\n    } else {\n      d = v;\n    }\n    o = o || d !== v;\n    if (void 0 !== d) {\n      s[l] = d;\n    }\n    e.__internal.path.pop();\n  }\n  return o ? s : a;\n};\n\nvar readRootField = (e, r, t) => {\n  if (Array.isArray(t)) {\n    var a = new Array(t.length);\n    var i = V;\n    for (var n = 0, o = t.length; n < o; n++) {\n      e.__internal.path.push(n);\n      a[n] = readRootField(e, r, t[n]);\n      i = i || a[n] !== t[n];\n      e.__internal.path.pop();\n    }\n    return i ? a : t;\n  } else if (null === t) {\n    return null;\n  }\n  var s = e.store.keyOfEntity(t);\n  if (null !== s) {\n    return readSelection(e, s, r, t) || null;\n  } else {\n    return readRoot(e, t.__typename, r, t);\n  }\n};\n\nfunction getFieldResolver(e, r, t, a) {\n  var i = a.store.resolvers[r];\n  var n = i && i[t];\n  var o;\n  for (var s in e) {\n    var l = e[s];\n    if (l && \"include\" !== s && \"skip\" !== s && a.store.directives[s]) {\n      o = a.store.directives[s](getFieldArguments(l, a.variables));\n      if (false) {}\n      break;\n    }\n  }\n  if (true) {\n    if (n && o) {\n      warn(`A resolver and directive is being used at \"${r}.${t}\" simultaneously. Only the directive will apply.`, 28, a.store.logger);\n    }\n  }\n  return o || n;\n}\n\nvar readSelection = (e, r, t, a, i) => {\n  var {store: n} = e;\n  var o = r === n.rootFields.query;\n  var s = i && n.keyOfEntity(i) || r;\n  if (true) {\n    if (!o && e.store.rootNames[s]) {\n      warn(\"Invalid root traversal: A selection was being read on `\" + s + \"` which is an uncached root type.\\nThe `\" + e.store.rootFields.mutation + \"` and `\" + e.store.rootFields.subscription + \"` types are special Operation Root Types and cannot be read back from the cache.\", 25, n.logger);\n    }\n  }\n  var l = !o ? readRecord(s, \"__typename\") || i && i.__typename : r;\n  if (\"string\" != typeof l) {\n    return;\n  } else if (i && l !== i.__typename) {\n     true && warn(\"Invalid resolver data: The resolver at `\" + s + \"` returned an invalid typename that could not be reconciled with the cache.\", 8, n.logger);\n    return;\n  }\n  var v = makeSelectionIterator(l, s, !1, void 0, t, e);\n  var d = !1;\n  var u = !1;\n  var c = V;\n  var p;\n  var f = e.partial;\n  var y = makeData(a);\n  while (void 0 !== (p = v())) {\n    var h = getName(p);\n    var m = getFieldArguments(p, e.variables);\n    var g = getFieldAlias(p);\n    var _ = getDirectives(p);\n    var N = getFieldResolver(_, l, h, e);\n    var k = keyOfField(h, m);\n    var E = joinKeys(s, k);\n    var O = readRecord(s, k);\n    var w = i ? i[h] : void 0;\n    if ( true && n.schema && l) {\n      isFieldAvailableOnType(n.schema, l, h, e.store.logger);\n    }\n    e.__internal.path.push(g);\n    var b = void 0;\n    if (\"__typename\" === h) {\n      b = l;\n    } else if (void 0 !== w && void 0 === p.selectionSet) {\n      b = w;\n    } else if (\"read\" === D && N) {\n      var x = y;\n      if (void 0 === p.selectionSet && void 0 !== O) {\n        x = {\n          ...y,\n          [g]: O,\n          [h]: O\n        };\n      }\n      updateContext(e, x, l, s, k, h);\n      b = N(x, m || {}, n, e);\n      if (p.selectionSet) {\n        b = resolveResolverResult(e, l, h, E, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], b, ownsData(a));\n      }\n      if (n.schema && null === b && !isFieldNullable(n.schema, l, h, e.store.logger)) {\n        return;\n      }\n    } else if (!p.selectionSet) {\n      b = O;\n    } else if (void 0 !== w) {\n      b = resolveResolverResult(e, l, h, E, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], w, ownsData(a));\n    } else {\n      var I = readLink(s, k);\n      if (void 0 !== I) {\n        b = resolveLink(e, I, l, h, getSelectionSet(p), void 0 !== y[g] ? y[g] : a[g], ownsData(a));\n      } else if (\"object\" == typeof O && null !== O) {\n        b = O;\n      }\n    }\n    if (!T && void 0 === b && (_.optional || A && !_.required || getFieldError(e) || n.schema && isFieldNullable(n.schema, l, h, e.store.logger))) {\n      e.partial = !0;\n      b = null;\n    } else if (null === b && (_.required || !1 === A)) {\n      if (e.store.logger && \"production\" !== \"development\" && \"read\" === D) {\n        e.store.logger(\"debug\", `Got value \"null\" for required field \"${h}\"${m ? ` with args ${JSON.stringify(m)}` : \"\"} on entity \"${s}\"`);\n      }\n      b = void 0;\n    } else {\n      d = d || \"__typename\" !== h;\n    }\n    e.__internal.path.pop();\n    c = c || b !== a[g];\n    if (void 0 !== b) {\n      y[g] = b;\n    } else if (T) {\n      u = !0;\n    } else {\n      if (e.store.logger && \"production\" !== \"development\" && \"read\" === D) {\n        e.store.logger(\"debug\", `No value for field \"${h}\"${m ? ` with args ${JSON.stringify(m)}` : \"\"} on entity \"${s}\"`);\n      }\n      e.partial = f;\n      return;\n    }\n  }\n  e.partial = e.partial || f;\n  e.hasNext = e.hasNext || u;\n  return o && e.partial && !d ? void 0 : c ? y : a;\n};\n\nvar resolveResolverResult = (e, r, t, a, i, n, o, s) => {\n  if (Array.isArray(o)) {\n    var {store: l} = e;\n    var v = l.schema ? isListNullable(l.schema, r, t, e.store.logger) : !1;\n    var d = e.partial;\n    var u = makeData(n, !0);\n    var c = V || !Array.isArray(n) || o.length !== n.length;\n    for (var p = 0, f = o.length; p < f; p++) {\n      e.__internal.path.push(p);\n      var y = resolveResolverResult(e, r, t, joinKeys(a, `${p}`), i, null != n ? n[p] : void 0, o[p], s);\n      e.__internal.path.pop();\n      if (void 0 === y && !v) {\n        e.partial = d;\n        return;\n      } else {\n        e.partial = e.partial || void 0 === y && v;\n        u[p] = null != y ? y : null;\n        c = c || u[p] !== n[p];\n      }\n    }\n    return c ? u : n;\n  } else if (null == o) {\n    return o;\n  } else if (s && null === n) {\n    return null;\n  } else if (isDataOrKey(o)) {\n    var h = n || makeData(n);\n    return \"string\" == typeof o ? readSelection(e, o, i, h) : readSelection(e, a, i, h, o);\n  } else {\n     true && warn(\"Invalid resolver value: The field at `\" + a + \"` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.\", 9, e.store.logger);\n    return;\n  }\n};\n\nvar resolveLink = (e, r, t, a, i, n, o) => {\n  if (Array.isArray(r)) {\n    var {store: s} = e;\n    var l = s.schema ? isListNullable(s.schema, t, a, e.store.logger) : !1;\n    var v = makeData(n, !0);\n    var d = e.partial;\n    var u = V || !Array.isArray(n) || r.length !== n.length;\n    for (var c = 0, p = r.length; c < p; c++) {\n      e.__internal.path.push(c);\n      var f = resolveLink(e, r[c], t, a, i, null != n ? n[c] : void 0, o);\n      e.__internal.path.pop();\n      if (void 0 === f && !l) {\n        e.partial = d;\n        return;\n      } else {\n        e.partial = e.partial || void 0 === f && l;\n        v[c] = f || null;\n        u = u || v[c] !== n[c];\n      }\n    }\n    return u ? v : n;\n  } else if (null === r || null === n && o) {\n    return null;\n  }\n  return readSelection(e, r, i, n || makeData(n));\n};\n\nvar isDataOrKey = e => \"string\" == typeof e || \"object\" == typeof e && \"string\" == typeof e.__typename;\n\nvar _write = (e, t, a, i) => {\n  if (true) {\n    getCurrentDependencies();\n  }\n  var n = (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(t.query);\n  var o = getMainOperation(n);\n  var s = {\n    data: a || makeData(),\n    dependencies: x\n  };\n  var l = e.rootFields[o.operation];\n  var v = makeContext(e, normalizeVariables(o, t.variables), getFragments(n), l, l, i);\n  if (true) {\n    pushDebugNode(l, o);\n  }\n  writeSelection(v, l, getSelectionSet(o), s.data);\n  if (true) {\n    popDebugNode();\n  }\n  return s;\n};\n\nvar writeSelection = (e, r, t, a) => {\n  var i = e.store.rootNames[r] || \"query\";\n  var n = !!e.store.rootNames[r];\n  var o = n ? r : a.__typename;\n  if (!o && r && e.optimistic) {\n    o = readRecord(r, \"__typename\");\n  }\n  if (!o) {\n     true && warn(\"Couldn't find __typename when writing.\\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\", 14, e.store.logger);\n    return;\n  } else if (!n && r) {\n    writeRecord(r, \"__typename\", o);\n    ((e, r) => {\n      var t = w.types.get(e);\n      if (!t) {\n        var a = new Set;\n        a.add(r);\n        w.types.set(e, a);\n      } else {\n        t.add(r);\n      }\n    })(o, r);\n  }\n  var s = e.store.updates[o];\n  var l = makeSelectionIterator(o, r || o, !1, void 0, t, e);\n  var v;\n  while (v = l()) {\n    var d = getName(v);\n    var u = getFieldArguments(v, e.variables);\n    var c = keyOfField(d, u);\n    var p = getFieldAlias(v);\n    var f = a[e.optimistic ? d : p];\n    if (\"__typename\" === d || void 0 === f && (T || e.optimistic && \"query\" === i)) {\n      continue;\n    }\n    if (true) {\n      if (e.store.schema && o && \"__typename\" !== d) {\n        isFieldAvailableOnType(e.store.schema, o, d, e.store.logger);\n      }\n    }\n    e.__internal.path.push(p);\n    var y = void 0;\n    if (e.optimistic && \"mutation\" === i) {\n      if (!(y = e.store.optimisticMutations[d])) {\n        continue;\n      }\n    } else if (e.optimistic && \"function\" == typeof f) {\n      y = f;\n    }\n    if (y) {\n      updateContext(e, a, o, r || o, c, d);\n      f = ensureData(y(u || {}, e.store, e));\n    }\n    if (void 0 === f) {\n      if (true) {\n        if (!r || !hasField(r, c) || e.optimistic && !readRecord(r, \"__typename\")) {\n           true && warn(\"Invalid undefined: The field at `\" + c + \"` is `undefined`, but the GraphQL query expects a \" + (void 0 === v.selectionSet ? \"scalar (number, boolean, etc)\" : \"selection set\") + \" for this field.\", 13, e.store.logger);\n        }\n      }\n      continue;\n    }\n    if (v.selectionSet) {\n      if (r && \"query\" === i) {\n        var h = joinKeys(r, c);\n        var m = writeField(e, getSelectionSet(v), ensureData(f), h, e.optimistic ? readLink(r || o, c) : void 0);\n        writeLink(r || o, c, m);\n      } else {\n        writeField(e, getSelectionSet(v), ensureData(f));\n      }\n    } else if (r && \"query\" === i) {\n      writeRecord(r || o, c, null !== f || !getFieldError(e) ? f : void 0);\n    }\n    var g = s && s[d];\n    if (g) {\n      updateContext(e, a, o, r || o, c, d);\n      a[d] = f;\n      g(a, u || {}, e.store, e);\n    }\n    e.__internal.path.pop();\n  }\n};\n\nvar K = /^__|PageInfo|(Connection|Edge)$/;\n\nvar writeField = (e, r, t, a, i) => {\n  if (Array.isArray(t)) {\n    var n = new Array(t.length);\n    for (var o = 0, s = t.length; o < s; o++) {\n      e.__internal.path.push(o);\n      var l = a ? joinKeys(a, `${o}`) : void 0;\n      var v = writeField(e, r, t[o], l, null != i ? i[o] : void 0);\n      n[o] = v;\n      e.__internal.path.pop();\n    }\n    return n;\n  } else if (null === t) {\n    return getFieldError(e) ? void 0 : null;\n  }\n  var d = e.store.keyOfEntity(t) || (\"string\" == typeof i ? i : null);\n  var u = t.__typename;\n  if (true) {\n    if (a && !e.store.keys[t.__typename] && null === d && \"string\" == typeof u && !K.test(u)) {\n      warn(\"Invalid key: The GraphQL query at the field at `\" + a + \"` has a selection set, but no key could be generated for the data at this field.\\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `\" + u + \"`.\\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `\" + u + \"` that always returns null.\", 15, e.store.logger);\n    }\n  }\n  var c = d || a;\n  writeSelection(e, c, r, t);\n  return c || null;\n};\n\nvar invalidateEntity = (e, r, t) => {\n  var a = r ? [ {\n    fieldKey: keyOfField(r, t)\n  } ] : inspectFields(e);\n  for (var i = 0, n = a.length; i < n; i++) {\n    var {fieldKey: o} = a[i];\n    if (void 0 !== readLink(e, o)) {\n      writeLink(e, o, void 0);\n    } else {\n      writeRecord(e, o, void 0);\n    }\n  }\n};\n\nvar invalidateType = e => {\n  var r = (e => w.types.get(e) || q)(e);\n  for (var t of r) {\n    invalidateEntity(t);\n  }\n};\n\nclass Store {\n  constructor(e) {\n    if (!e) {\n      e = {};\n    }\n    this.logger = e.logger;\n    this.resolvers = e.resolvers || {};\n    this.directives = e.directives || {};\n    this.optimisticMutations = e.optimistic || {};\n    this.keys = e.keys || {};\n    this.globalIDs = Array.isArray(e.globalIDs) ? new Set(e.globalIDs) : !!e.globalIDs;\n    var r = \"Query\";\n    var t = \"Mutation\";\n    var a = \"Subscription\";\n    if (e.schema) {\n      var i = (({__schema: e}) => {\n        var r = new Map;\n        var buildNameMap = e => {\n          var r;\n          return () => {\n            if (!r) {\n              r = {};\n              for (var t = 0; t < e.length; t++) {\n                r[e[t].name] = e[t];\n              }\n            }\n            return r;\n          };\n        };\n        var buildType = e => {\n          switch (e.kind) {\n           case \"OBJECT\":\n           case \"INTERFACE\":\n            return {\n              name: e.name,\n              kind: e.kind,\n              interfaces: buildNameMap(e.interfaces || []),\n              fields: buildNameMap(e.fields.map((e => ({\n                name: e.name,\n                type: e.type,\n                args: buildNameMap(e.args)\n              }))))\n            };\n\n           case \"UNION\":\n            return {\n              name: e.name,\n              kind: e.kind,\n              types: buildNameMap(e.possibleTypes || [])\n            };\n          }\n        };\n        var t = {\n          query: e.queryType ? e.queryType.name : null,\n          mutation: e.mutationType ? e.mutationType.name : null,\n          subscription: e.subscriptionType ? e.subscriptionType.name : null,\n          types: void 0,\n          isSubType(e, t) {\n            var a = r.get(e);\n            var i = r.get(t);\n            if (!a || !i) {\n              return !1;\n            } else if (\"UNION\" === a.kind) {\n              return !!a.types()[t];\n            } else if (\"OBJECT\" !== a.kind && \"OBJECT\" === i.kind) {\n              return !!i.interfaces()[e];\n            } else {\n              return e === t;\n            }\n          }\n        };\n        if (e.types) {\n          t.types = r;\n          for (var a = 0; a < e.types.length; a++) {\n            var i = e.types[a];\n            if (i && i.name) {\n              var n = buildType(i);\n              if (n) {\n                r.set(i.name, n);\n              }\n            }\n          }\n        }\n        return t;\n      })(e.schema);\n      r = i.query || r;\n      t = i.mutation || t;\n      a = i.subscription || a;\n      if (i.types) {\n        this.schema = i;\n      }\n    }\n    this.updates = e.updates || {};\n    this.rootFields = {\n      query: r,\n      mutation: t,\n      subscription: a\n    };\n    this.rootNames = {\n      [r]: \"query\",\n      [t]: \"mutation\",\n      [a]: \"subscription\"\n    };\n    this.data = (n = r, {\n      hydrating: !1,\n      defer: !1,\n      gc: new Set,\n      types: new Map,\n      persist: new Set,\n      queryRootKey: n,\n      refCount: new Map,\n      links: {\n        optimistic: new Map,\n        base: new Map\n      },\n      records: {\n        optimistic: new Map,\n        base: new Map\n      },\n      deferredKeys: new Set,\n      commutativeKeys: new Set,\n      dirtyKeys: new Set,\n      optimisticOrder: [],\n      storage: null\n    });\n    var n;\n    if (this.schema && \"production\" !== \"development\") {\n      !function expectValidKeyingConfig(e, r, t) {\n        if (true) {\n          for (var a in r) {\n            if (true) {\n              if (!e.types.has(a)) {\n                warn(\"Invalid Object type: The type `\" + a + \"` is not an object in the defined schema, but the `keys` option is referencing it.\", 20, t);\n              }\n            }\n          }\n        }\n      }(this.schema, this.keys, this.logger);\n      !function expectValidUpdatesConfig(e, r, t) {\n        if (false) {}\n        for (var a in r) {\n          if (!r[a]) {\n            continue;\n          } else if (!e.types.has(a)) {\n            var i = \"\";\n            if (\"Mutation\" === a && e.mutation && \"Mutation\" !== e.mutation) {\n              i += \"\\nMaybe your config should reference `\" + e.mutation + \"`?\";\n            } else if (\"Subscription\" === a && e.subscription && \"Subscription\" !== e.subscription) {\n              i += \"\\nMaybe your config should reference `\" + e.subscription + \"`?\";\n            }\n            return  true ? warn(\"Invalid updates type: The type `\" + a + \"` is not an object in the defined schema, but the `updates` config is referencing it.\" + i, 21, t) : 0;\n          }\n          var n = e.types.get(a).fields();\n          for (var o in r[a]) {\n            if (true) {\n              if (!n[o]) {\n                warn(\"Invalid updates field: `\" + o + \"` on `\" + a + \"` is not in the defined schema, but the `updates` config is referencing it.\", 22, t);\n              }\n            }\n          }\n        }\n      }(this.schema, this.updates, this.logger);\n      !function expectValidResolversConfig(e, r, t) {\n        if (false) {}\n        for (var a in r) {\n          if (\"Query\" === a) {\n            if (e.query) {\n              var i = e.types.get(e.query).fields();\n              for (var n in r.Query || {}) {\n                if (!i[n]) {\n                  warnAboutResolver(\"Query.\" + n, t);\n                }\n              }\n            } else {\n              warnAboutResolver(\"Query\", t);\n            }\n          } else if (!e.types.has(a)) {\n            warnAboutResolver(a, t);\n          } else if (\"INTERFACE\" === e.types.get(a).kind || \"UNION\" === e.types.get(a).kind) {\n            warnAboutAbstractResolver(a, e.types.get(a).kind, t);\n          } else {\n            var o = e.types.get(a).fields();\n            for (var s in r[a] || {}) {\n              if (!o[s]) {\n                warnAboutResolver(a + \".\" + s, t);\n              }\n            }\n          }\n        }\n      }(this.schema, this.resolvers, this.logger);\n      !function expectValidOptimisticMutationsConfig(e, r, t) {\n        if (false) {}\n        if (e.mutation) {\n          var a = e.types.get(e.mutation).fields();\n          for (var i in r) {\n            if (true) {\n              if (!a[i]) {\n                warn(`Invalid optimistic mutation field: \\`${i}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`, 24, t);\n              }\n            }\n          }\n        }\n      }(this.schema, this.optimisticMutations, this.logger);\n    }\n  }\n  keyOfField(e, r) {\n    return keyOfField(e, r);\n  }\n  keyOfEntity(e) {\n    if (S && e === S.parent) {\n      return S.parentKey;\n    } else if (null == e || \"string\" == typeof e) {\n      return e || null;\n    } else if (!e.__typename) {\n      return null;\n    } else if (this.rootNames[e.__typename]) {\n      return e.__typename;\n    }\n    var r = null;\n    if (this.keys[e.__typename]) {\n      r = this.keys[e.__typename](e) || null;\n    } else if (null != e.id) {\n      r = `${e.id}`;\n    } else if (null != e._id) {\n      r = `${e._id}`;\n    }\n    var t = e.__typename;\n    return !0 === this.globalIDs || this.globalIDs && this.globalIDs.has(t) || !r ? r : `${t}:${r}`;\n  }\n  resolve(e, r, t) {\n    var a = this.keyOfEntity(e);\n    if (a) {\n      var i = keyOfField(r, t);\n      var n = readRecord(a, i);\n      if (void 0 !== n) {\n        return n;\n      }\n      var o = readLink(a, i);\n      if (void 0 !== o) {\n        o = ensureLink(this, o);\n      }\n      return o;\n    }\n  }\n  resolveFieldByKey(e, r, t) {\n    return this.resolve(e, r, t);\n  }\n  invalidate(e, r, t) {\n    var a = this.keyOfEntity(e);\n    if (e && \"string\" == typeof e && !r && !t && !this.resolve(e, \"__typename\")) {\n      invalidateType(e);\n    } else {\n      invariant(a,  true ? \"Can't generate a key for invalidate(...).\\nYou have to pass an id or _id field or create a custom `keys` field for `\" + (\"object\" == typeof e ? e.__typename : e + \"`.\") : 0, 19);\n      invalidateEntity(a, r, t);\n    }\n  }\n  inspectFields(e) {\n    var r = this.keyOfEntity(e);\n    return r ? inspectFields(r) : [];\n  }\n  updateQuery(e, r) {\n    var a = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(e.query, e.variables);\n    var i = r(this.readQuery(a));\n    if (null !== i) {\n      _write(this, a, i, void 0);\n    }\n  }\n  readQuery(e) {\n    var r = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(e.query, e.variables);\n    return _query(this, r, void 0, void 0).data;\n  }\n  readFragment(e, t, a, i) {\n    return ((e, r, t, a, i) => {\n      var n = getFragments(r);\n      var o;\n      if (i) {\n        if (!(o = n[i])) {\n           true && warn(\"readFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + i + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 6, e.logger);\n          return null;\n        }\n      } else if (!(o = n[Object.keys(n)[0]])) {\n         true && warn(\"readFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 6, e.logger);\n        return null;\n      }\n      var s = getFragmentTypeName(o);\n      if (\"string\" != typeof t && !t.__typename) {\n        t.__typename = s;\n      }\n      var l = e.keyOfEntity(t);\n      if (!l) {\n         true && warn(\"Can't generate a key for readFragment(...).\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 7, e.logger);\n        return null;\n      }\n      if (true) {\n        pushDebugNode(s, o);\n      }\n      var v = makeContext(e, a || {}, n, s, l, void 0);\n      var d = readSelection(v, l, getSelectionSet(o), makeData()) || null;\n      if (true) {\n        popDebugNode();\n      }\n      return d;\n    })(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e), t, a, i);\n  }\n  writeFragment(e, t, a, i) {\n    ((e, r, t, a, i) => {\n      var n = getFragments(r);\n      var o;\n      if (i) {\n        if (!(o = n[i])) {\n           true && warn(\"writeFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + i + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 11, e.logger);\n          return null;\n        }\n      } else if (!(o = n[Object.keys(n)[0]])) {\n         true && warn(\"writeFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 11, e.logger);\n        return null;\n      }\n      var s = getFragmentTypeName(o);\n      var l = {\n        __typename: s,\n        ...t\n      };\n      var v = e.keyOfEntity(l);\n      if (!v) {\n        return  true ? warn(\"Can't generate a key for writeFragment(...) data.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 12, e.logger) : 0;\n      }\n      if (true) {\n        pushDebugNode(s, o);\n      }\n      var d = makeContext(e, a || {}, n, s, v, void 0);\n      writeSelection(d, v, getSelectionSet(o), l);\n      if (true) {\n        popDebugNode();\n      }\n    })(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e), t, a, i);\n  }\n  link(e, r, ...t) {\n    var a = 2 === t.length ? t[0] : null;\n    var i = 2 === t.length ? t[1] : t[0];\n    var n = this.keyOfEntity(e);\n    if (n) {\n      writeLink(n, keyOfField(r, a), ensureLink(this, i));\n    }\n  }\n}\n\nvar addMetadata = (e, r) => (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, e, {\n  ...e.context,\n  meta: {\n    ...e.context.meta,\n    ...r\n  }\n});\n\nvar toRequestPolicy = (e, r) => (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, e, {\n  ...e.context,\n  requestPolicy: r\n});\n\nvar cacheExchange = e => ({forward: t, client: i, dispatchDebug: n}) => {\n  var o = new Store(e);\n  if (e && e.storage) {\n    o.data.hydrating = !0;\n    e.storage.readData().then((r => {\n      ((e, r, t) => {\n        initDataState(\"write\", e, null);\n        for (var a in t) {\n          var i = t[a];\n          if (void 0 !== i) {\n            var {entityKey: n, fieldKey: o} = deserializeKeyInfo(a);\n            if (\":\" === i[0]) {\n              if (void 0 === readLink(n, o)) {\n                writeLink(n, o, JSON.parse(i.slice(1)));\n              }\n            } else if (void 0 === readRecord(n, o)) {\n              writeRecord(n, o, JSON.parse(i));\n            }\n          }\n        }\n        e.storage = r;\n        e.hydrating = !1;\n        clearDataState();\n      })(o.data, e.storage, r);\n      if (e.storage.onCacheHydrated) {\n        e.storage.onCacheHydrated();\n      }\n    }));\n  }\n  var f = new Map;\n  var y = [];\n  var h = new Map;\n  var m = new Map;\n  var g = new Set;\n  var _ = new Set;\n  var N = new Map;\n  var k = new Set;\n  var E = new Set;\n  var isBlockedByOptimisticUpdate = e => {\n    for (var r of e.values()) {\n      if (g.has(r)) {\n        return !0;\n      }\n    }\n    return !1;\n  };\n  var collectPendingOperations = (e, r) => {\n    if (r) {\n      for (var t of r.values()) {\n        var a = N.get(t);\n        if (a) {\n          for (var i of a.values()) {\n            e.add(i);\n          }\n        }\n      }\n    }\n  };\n  var executePendingOperations = (e, r, t) => {\n    for (var a of r.values()) {\n      if (a !== e.key) {\n        var n = h.get(a);\n        if (n) {\n          if (\"query\" === e.kind) {\n            E.add(a);\n          }\n          var o = \"cache-first\";\n          if (_.has(a)) {\n            _.delete(a);\n            o = \"cache-and-network\";\n          }\n          i.reexecuteOperation(toRequestPolicy(n, o));\n        }\n      }\n    }\n    if (!t) {\n      var s = k;\n      if (\"query\" === e.kind) {\n        (k = E).add(e.key);\n      }\n      (E = s).clear();\n    }\n  };\n  var prepareForwardedOperation = e => {\n    var t = !1;\n    if (\"query\" === e.kind) {\n      reserveLayer(o.data, e.key);\n      h.set(e.key, e);\n    } else if (\"teardown\" === e.kind) {\n      h.delete(e.key);\n      m.delete(e.key);\n      k.delete(e.key);\n      noopDataState(o.data, e.key);\n      return e;\n    } else if (\"mutation\" === e.kind && \"network-only\" !== e.context.requestPolicy) {\n      h.set(e.key, e);\n      initDataState(\"write\", o.data, e.key, !0, !1);\n      var {dependencies: i} = _write(o, e, void 0, void 0);\n      clearDataState();\n      if (i.size) {\n        for (var n of i.values()) {\n          g.add(n);\n        }\n        f.set(e.key, i);\n        var s = new Set;\n        collectPendingOperations(s, i);\n        executePendingOperations(e, s, !0);\n        t = !0;\n      }\n    }\n    return (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(e.kind, {\n      key: e.key,\n      query: (0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.formatDocument)(e.query),\n      variables: e.variables ? filterVariables(getMainOperation(e.query), e.variables) : e.variables\n    }, {\n      ...e.context,\n      optimistic: t\n    });\n  };\n  var updateDependencies = (e, r) => {\n    for (var t of r.values()) {\n      var a = N.get(t);\n      if (!a) {\n        N.set(t, a = new Set);\n      }\n      a.add(e.key);\n    }\n  };\n  var operationResultFromCache = e => {\n    initDataState(\"read\", o.data, void 0, !1, !1);\n    var r = _query(o, e, m.get(e.key), void 0);\n    clearDataState();\n    var t = r.data ? !r.partial && !r.hasNext ? \"hit\" : \"partial\" : \"miss\";\n    m.set(e.key, r.data);\n    h.set(e.key, e);\n    updateDependencies(e, r.dependencies);\n    return {\n      outcome: t,\n      operation: e,\n      data: r.data,\n      dependencies: r.dependencies,\n      hasNext: r.hasNext\n    };\n  };\n  var updateCacheWithResult = (e, r) => {\n    var t = h.get(e.operation.key) || e.operation;\n    if (\"mutation\" === t.kind) {\n      var a = f.get(t.key);\n      collectPendingOperations(r, a);\n      f.delete(t.key);\n    }\n    if (\"subscription\" === t.kind || e.hasNext) {\n      reserveLayer(o.data, t.key, !0);\n    }\n    var i;\n    var n = e.data;\n    if (n) {\n      initDataState(\"write\", o.data, t.key, !1, !1);\n      var s = _write(o, t, n, e.error).dependencies;\n      clearDataState();\n      collectPendingOperations(r, s);\n      var l = \"query\" === t.kind ? m.get(t.key) : null;\n      initDataState(\"read\", o.data, t.key, !1, l !== n);\n      var v = _query(o, t, l || n, e.error);\n      clearDataState();\n      n = v.data;\n      if (\"query\" === t.kind) {\n        collectPendingOperations(r, i = v.dependencies);\n        m.set(t.key, n);\n      }\n    } else {\n      noopDataState(o.data, t.key);\n    }\n    if (i) {\n      updateDependencies(e.operation, i);\n    }\n    return {\n      operation: t,\n      data: n,\n      error: e.error,\n      extensions: e.extensions,\n      hasNext: e.hasNext,\n      stale: e.stale\n    };\n  };\n  return e => {\n    var r = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.share)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)(operationResultFromCache)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => \"query\" === e.kind && \"network-only\" !== e.context.requestPolicy))(e)));\n    var a = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => \"query\" !== e.kind || \"network-only\" === e.context.requestPolicy))(e);\n    var m = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e => {\n       true && n({\n        type: \"cacheMiss\",\n        message: \"The result could not be retrieved from the cache\",\n        operation: e.operation,\n        source: \"cacheExchange\"\n      });\n      return  true ? addMetadata(e.operation, {\n        cacheOutcome: \"miss\"\n      }) : 0;\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => \"miss\" === e.outcome && \"cache-only\" !== e.operation.context.requestPolicy && !isBlockedByOptimisticUpdate(e.dependencies) && !k.has(e.operation.key)))(r));\n    var N = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e => {\n      var {requestPolicy: r} = e.operation.context;\n      var t = \"cache-only\" !== r && (e.hasNext || \"cache-and-network\" === r || \"cache-first\" === r && \"partial\" === e.outcome && !k.has(e.operation.key));\n      var a = \"cache-only\" !== r && (t || \"partial\" === e.outcome && k.has(e.operation.key) && ((s = o.data).commutativeKeys.has(l = e.operation.key) || s.optimisticOrder.indexOf(l) > -1));\n      var s, l;\n      var v = {\n        operation:  true ? addMetadata(e.operation, {\n          cacheOutcome: e.outcome\n        }) : 0,\n        data: e.data,\n        error: e.error,\n        extensions: e.extensions,\n        stale: a && !e.hasNext,\n        hasNext: t && e.hasNext\n      };\n      if (!t) {} else if (!isBlockedByOptimisticUpdate(e.dependencies)) {\n        i.reexecuteOperation(toRequestPolicy(h.get(e.operation.key) || e.operation, \"network-only\"));\n      } else if (\"cache-and-network\" === r) {\n        _.add(e.operation.key);\n      }\n       true && n({\n        type: \"cacheHit\",\n        message: \"A requested operation was found and returned from the cache.\",\n        operation: e.operation,\n        data: {\n          value: v\n        },\n        source: \"cacheExchange\"\n      });\n      return v;\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => \"miss\" !== e.outcome || \"cache-only\" === e.operation.context.requestPolicy))(r));\n    var E = t((0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)(prepareForwardedOperation)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([ a, m ])));\n    var O = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.map)((e => {\n      var r = new Set;\n      var t = updateCacheWithResult(e, r);\n      executePendingOperations(e.operation, r, !1);\n      return t;\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => !f.has(e.operation.key)))(E));\n    var w = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.mergeMap)((e => {\n      if (y.push(e) < f.size) {\n        return wonka__WEBPACK_IMPORTED_MODULE_3__.empty;\n      }\n      for (var r = 0; r < y.length; r++) {\n        reserveLayer(o.data, y[r].operation.key);\n      }\n      g.clear();\n      var t = [];\n      var a = new Set;\n      var i;\n      while (i = y.shift()) {\n        t.push(updateCacheWithResult(i, a));\n      }\n      executePendingOperations(e.operation, a, !1);\n      return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.fromArray)(t);\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => f.has(e.operation.key)))(E));\n    return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([ O, w, N ]);\n  };\n};\n\nvar M = {\n  \"cache-only\": 0,\n  \"cache-first\": 1,\n  \"network-only\": 2,\n  \"cache-and-network\": 3\n};\n\nvar offlineExchange = e => r => {\n  var {storage: n} = e;\n  var o = e.isOfflineError || (e => e && e.networkError && !e.response && (\"undefined\" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\\s?error/i.test(e.networkError.message)));\n  if (n && n.onOnline && n.readMetadata && n.writeMetadata) {\n    var {forward: l, client: u, dispatchDebug: c} = r;\n    var {source: p, next: h} = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.makeSubject)();\n    var m = [];\n    var g = !1;\n    var _ = !1;\n    var updateMetadata = () => {\n      if (g) {\n        var e = [];\n        for (var r = 0; r < m.length; r++) {\n          var t = m[r];\n          if (\"mutation\" === t.kind) {\n            e.push({\n              query: (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.s)(t.query),\n              variables: t.variables,\n              extensions: t.extensions\n            });\n          }\n        }\n        n.writeMetadata(e);\n      }\n    };\n    var filterQueue = e => {\n      for (var r = m.length - 1; r >= 0; r--) {\n        if (m[r].key === e) {\n          m.splice(r, 1);\n        }\n      }\n    };\n    var flushQueue = () => {\n      if (!_) {\n        var e = new Set;\n        _ = !0;\n        for (var r = 0; r < m.length; r++) {\n          var t = m[r];\n          if (\"mutation\" === t.kind || !e.has(t.key)) {\n            e.add(t.key);\n            if (\"subscription\" !== t.kind) {\n              h((0,_urql_core__WEBPACK_IMPORTED_MODULE_2__.makeOperation)(\"teardown\", t));\n              var i = \"cache-first\";\n              for (var n = 0; n < m.length; n++) {\n                var {requestPolicy: o} = m[n].context;\n                if (M[o] > M[i]) {\n                  i = o;\n                }\n              }\n              h(toRequestPolicy(t, i));\n            } else {\n              h(toRequestPolicy(t, \"cache-first\"));\n            }\n          }\n        }\n        _ = !1;\n        m.length = 0;\n        updateMetadata();\n      }\n    };\n    var N = cacheExchange({\n      ...e,\n      storage: {\n        ...n,\n        readData() {\n          var e = n.readData();\n          return {\n            async then(r) {\n              var a = await n.readMetadata();\n              for (var i = 0; a && i < a.length; i++) {\n                m.push(u.createRequestOperation(\"mutation\", (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.h)(a[i].query, a[i].variables), a[i].extensions));\n              }\n              r(await e);\n              n.onOnline(flushQueue);\n              g = !0;\n              flushQueue();\n            }\n          };\n        }\n      }\n    })({\n      client: u,\n      dispatchDebug: c,\n      forward: e => (0,wonka__WEBPACK_IMPORTED_MODULE_3__.share)((0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => {\n        if (g && \"mutation\" === e.operation.kind && e.operation.context.optimistic && o(e.error, e)) {\n          m.push(e.operation);\n          updateMetadata();\n          return !1;\n        }\n        return !0;\n      }))(l(e)))\n    });\n    return e => {\n      var r = (0,wonka__WEBPACK_IMPORTED_MODULE_3__.merge)([ p, (0,wonka__WEBPACK_IMPORTED_MODULE_3__.onPush)((e => {\n        if (\"query\" === e.kind && !g) {\n          m.push(e);\n        } else if (\"teardown\" === e.kind) {\n          filterQueue(e.key);\n        }\n      }))(e) ]);\n      return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.filter)((e => {\n        if (\"query\" === e.operation.kind) {\n          if (o(e.error, e)) {\n            h(toRequestPolicy(e.operation, \"cache-only\"));\n            m.push(e.operation);\n            return !1;\n          } else if (!g) {\n            filterQueue(e.operation.key);\n          }\n        }\n        return !0;\n      }))(N(r));\n    };\n  }\n  return cacheExchange(e)(r);\n};\n\n\n//# sourceMappingURL=urql-exchange-graphcache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@urql+exchange-graphcache@6.5.1_graphql@16.8.1/node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\n");

/***/ })

};
;